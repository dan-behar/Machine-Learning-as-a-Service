plumber::plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
plumber::plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
install.packages("gridExtra")
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
install.packages("ConfusionTableR")
plumb(file='plumber.R')$run()
?confusionMatrix
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
pred <- factor(
c(
rep(lvs, times = c(54, 32)),
rep(lvs, times = c(27, 231))),
levels = rev(lvs))
library(ConfusionTableR)
library(caret)
lvs <- c("normal", "abnormal")
truth <- factor(rep(lvs, times = c(86, 258)),
levels = rev(lvs))
pred <- factor(
c(
rep(lvs, times = c(54, 32)),
rep(lvs, times = c(27, 231))),
levels = rev(lvs))
xtab <- table(pred, truth)
confusionMatrix(xtab)
confusionMatrix(pred, truth)
confusionMatrix(xtab, prevalence = 0.25)
print(truth)
plumb(file='plumber.R')$run()
?factor
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
?rev
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
plumber::plumb(file='plumber.R')$run()
ci.auc(rocaoc)
rocaoc = roc(test$Risk ~ test$Duration)
setwd("H:/My Drive/Universidad/6to. Semestre/DS for Finance/Scripts/Regresiones Probabilisticas")
cf = read.csv("cfcn.csv")
library(ISLR)
summary(cf)
#-----------------------ESTO ES LO QUE TENIA--------------------------------
#Evaluar variables cualitativas
e.type = table(cf$type, cf$isFraud)
prop.table(e.type,1) #La mas relevante es TRANSFER
library(fastDummies)
cf2 = dummy_cols(cf, select_columns = "type")
#Analizar una dummy
e.cashout = table(cf2$type_CASH_OUT, cf2$isFraud)
prop.table(e.cashout,1) #El 42% de las Cashout fueron fraude, si es relevante
#H0: no hay ralacion entre las variables, si p<0.05 rechazo H0
e.transfer = table(cf2$type_TRANSFER, cf2$isFraud)
prop.table(e.transfer,1) #75% de las transferencias fueron fraude
#Evaluar variables cuantitativas
install.packages("pROC")
library(pROC)
e.amount = roc(cf2$isFraud ~ cf2$amount)
e.amount #79.53% (mientras mas alto mejor)
install.packages("pROC")
ci.auc(e.amount) #intervalo bajo no es mucho mas bajo
plot(e.amount) #buena predictora
e.amount #79.53% (mientras mas alto mejor)
ci.auc(e.amount) #intervalo bajo no es mucho mas bajo
e.amount #79.53% (mientras mas alto mejor)
View(e.amount)
e.amount$auc #79.53% (mientras mas alto mejor)
typeof(e.amount$auc) #79.53% (mientras mas alto mejor)
plumb(file='C:/Users/danie/Desktop/DataProduct-2022/Proyectos/Proyecto Modelo/plumber.R')$run()
plumb(file='C:/Users/danie/Desktop/DataProduct-2022/Proyectos/Proyecto Modelo/plumber.R')$run()
plumb(file='C:/Users/danie/Desktop/DataProduct-2022/Proyectos/Proyecto Modelo/plumber.R')$run()
plumb(file='C:/Users/danie/Desktop/DataProduct-2022/Proyectos/Proyecto Modelo/plumber.R')$run()
plumb(file='C:/Users/danie/Desktop/DataProduct-2022/Proyectos/Proyecto Modelo/plumber.R')$run()
plumb(file='C:/Users/danie/Desktop/DataProduct-2022/Proyectos/Proyecto Modelo/plumber.R')$run()
plumb(file='C:/Users/danie/Desktop/DataProduct-2022/Proyectos/Proyecto Modelo/plumber.R')$run()
plumb(file='C:/Users/danie/Desktop/DataProduct-2022/Proyectos/Proyecto Modelo/plumber.R')$run()
plumb(file='C:/Users/danie/Desktop/DataProduct-2022/Proyectos/Proyecto Modelo/plumber.R')$run()
str(test)
str(test)
str(result)
Q
plumb(file='C:/Users/danie/Desktop/DataProduct-2022/Proyectos/Proyecto Modelo/plumber.R')$run()
c
plumb(file='C:/Users/danie/Desktop/DataProduct-2022/Proyectos/Proyecto Modelo/plumber.R')$run()
plumber::plumb(file='plumber.R')$run()
code <- paste(
"hours_vector <- runif(1000, 0, 24)",
"ms_vector <- numeric(1000)",
"# of course it would be much efficient to do vectorized operations xP",
"for (i in seq_along(hours_vector)) {",
"  ms_vector[i] <- 1000 * 60 * 60 * hours_vector[i]",
"}",
sep = "\n"
)
cat(code)
opt_code <- opt_constant_folding(list(code))
code <- paste(
"hours_vector <- runif(1000, 0, 24)",
"ms_vector <- numeric(1000)",
"# of course it would be much efficient to do vectorized operations xP",
"for (i in seq_along(hours_vector)) {",
"  ms_vector[i] <- 1000 * 60 * 60 * hours_vector[i]",
"}",
sep = "\n"
)
cat(code)
opt_code <- opt_constant_folding(list(code))
install.packages("rco")
library("rco")
library("ggplot2")
code <- paste(
"hours_vector <- runif(1000, 0, 24)",
"ms_vector <- numeric(1000)",
"# of course it would be much efficient to do vectorized operations xP",
"for (i in seq_along(hours_vector)) {",
"  ms_vector[i] <- 1000 * 60 * 60 * hours_vector[i]",
"}",
sep = "\n"
)
cat(code)
opt_code <- opt_constant_folding(list(code))
cat(opt_code$codes[[1]])
bmark_res <- microbenchmark({
eval(parse(text = code))
}, {
eval(parse(text = opt_code))
})
install.packages("microbenchmark")
bmark_res <- microbenchmark({
eval(parse(text = code))
}, {
eval(parse(text = opt_code))
})
library(ConfusionTableR)
detach("package:ConfusionTableR", unload = TRUE)
remove.packages("ConfusionTableR", lib="~/R/win-library/4.1")
library("rco")
library("microbenchmark")
library("ggplot2")
code <- paste(
"hours_vector <- runif(1000, 0, 24)",
"ms_vector <- numeric(1000)",
"# of course it would be much efficient to do vectorized operations xP",
"for (i in seq_along(hours_vector)) {",
"  ms_vector[i] <- 1000 * 60 * 60 * hours_vector[i]",
"}",
sep = "\n"
)
cat(code)
opt_code <- opt_constant_folding(list(code))
cat(opt_code$codes[[1]])
bmark_res <- microbenchmark({
eval(parse(text = code))
}, {
eval(parse(text = opt_code))
})
autoplot(bmark_res)
speed_up(bmark_res)
x <- 1 / (2 + 1)
y <- 1 / (2 + 1)
z <- 1 / (2 + 1)
x + y + z == 1
code <- paste(
"x <- 1/(2+1)",
"y <- 1/(2+1)",
"z <- 1/(2+1)",
"x + y + z == 1",
sep = "\n"
)
opt_code <- opt_constant_folding(list(code), fold_floats = TRUE)$codes[[1]]
cat(opt_code)
eval(parse(text = code))
eval(parse(text = opt_code))
opt_code <- opt_constant_folding(list(code), fold_floats = FALSE)$codes[[1]]
cat(opt_code)
opt_code <- opt_constant_folding(list(paste(
"x <- 1/(2+1)", # will not fold it because we lose precision
"y <- 1/(2+1) > 3", # however, folded or not, it is not > 3, so folds it
sep = "\n"
)), fold_floats = FALSE)$codes[[1]]
cat(opt_code)
library("rco")
library("microbenchmark")
library("ggplot2")
code <- paste(
"hours_vector <- runif(1000, 0, 24)",
"ms_vector <- numeric(1000)",
"# of course it would be much efficient to do vectorized operations xP",
"for (i in seq_along(hours_vector)) {",
"  ms_vector[i] <- 1000 * 60 * 60 * hours_vector[i]",
"}",
sep = "\n"
)
cat(code)
opt_code <- opt_constant_folding(list(code))
cat(opt_code$codes[[1]])
bmark_res <- microbenchmark({
eval(parse(text = code))
}, {
eval(parse(text = opt_code))
})
autoplot(bmark_res)
x <- 1 / (2 + 1)
y <- 1 / (2 + 1)
z <- 1 / (2 + 1)
x + y + z == 1
code <- paste(
"x <- 1/(2+1)",
"y <- 1/(2+1)",
"z <- 1/(2+1)",
"x + y + z == 1",
sep = "\n"
)
opt_code <- opt_constant_folding(list(code), fold_floats = TRUE)$codes[[1]]
cat(opt_code)
eval(parse(text = code))
eval(parse(text = opt_code))
